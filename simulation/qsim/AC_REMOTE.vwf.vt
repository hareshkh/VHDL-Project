// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2016 18:15:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          AC_REMOTE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AC_REMOTE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg FANDOWN;
reg FANUP;
reg RESET;
reg TEMPDOWN;
reg TEMPUP;
// wires                                               
wire [1:0] FANSPEED;
wire [5:0] TEMPERATURE;

// assign statements (if any)                          
AC_REMOTE i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.FANDOWN(FANDOWN),
	.FANSPEED(FANSPEED),
	.FANUP(FANUP),
	.RESET(RESET),
	.TEMPDOWN(TEMPDOWN),
	.TEMPERATURE(TEMPERATURE),
	.TEMPUP(TEMPUP)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #20000 1'b0;
end 

// FANDOWN
initial
begin
	FANDOWN = 1'b0;
	FANDOWN = #20000 1'b1;
	FANDOWN = #20000 1'b0;
end 

// FANUP
initial
begin
	FANUP = 1'b0;
	FANUP = #80000 1'b1;
	FANUP = #20000 1'b0;
	FANUP = #20000 1'b1;
	FANUP = #20000 1'b0;
end 

// TEMPDOWN
initial
begin
	TEMPDOWN = 1'b0;
	TEMPDOWN = #180000 1'b1;
	TEMPDOWN = #20000 1'b0;
end 

// TEMPUP
initial
begin
	TEMPUP = 1'b0;
	TEMPUP = #220000 1'b1;
	TEMPUP = #20000 1'b0;
	TEMPUP = #60000 1'b1;
	TEMPUP = #20000 1'b0;
	TEMPUP = #80000 1'b1;
	TEMPUP = #20000 1'b0;
end 
endmodule

